############################
#Accomplishes the following build tasks
#
#1) Runs the cloudformation template to create the necessary resources
#2) Runs python coverage function to generate Auto HTML documentation
##) Runs unit tests of lambda functions, checks aws resources created
#
#
############################
version: 0.2

# env:
  # variables:
  #   JAVA_HOME: "/usr/lib/jvm/java-8-openjdk-amd64"
  # parameter-store:
  #   LOGIN_PASSWORD: /CodeBuild/dockerLoginPassword

phases:
  ###########################################
  #Uses a python runtime
  #Note that you do not need the \ to escape
  #aws cli commands
  ###########################################
  install:
    runtime-versions:
       python: 3.7
    commands:
      - echo Entered the install phase...
      - pip install -r tests/requirements.txt
      - ls -l
    finally:
  # pre_build:
  #   commands:
  #     - echo Entered the pre_build phase...
  #     - docker login –u User –p $LOGIN_PASSWORD
  #   finally:
  #     - echo This always runs even if the login command fails
  #
  #Builds the cloudformation stack that contains the
  #static webpage
  build:
    commands:
      - echo Entered the build phase...
      - echo Build started on `date`

      ############################################
      #allows us to execute shell script and then runs it
      #after the shell script is finished running it
      #uploads the lambda deployment package to its
      #runtime s3 bucket
      ############################################
      - chmod +x lambda/create_deployment_package.sh
      - ./lambda/create_deployment_package.sh
      - aws s3 cp ./ride.zip s3://cf-to-backend/ride.zip

      #uploads zip file of code to lambda
      - aws lambda update-function-code --function-name prodlambda-ride-sneakpeek
        --s3-bucket cf-to-backend --s3-key ride.zip

      #Will not return until the stack create is complete
    #   - aws cloudformation create-stack --stack-name sneakpeek-webpage
    #    --template-body file://templates/static_webpage.yml
    #    --parameters  file://util/dev_config.json
    #    --capabilities CAPABILITY_NAMED_IAM
      #Waits until the stack has been successfully created
    #   - aws cloudformation wait stack-create-complete
    #     --stack-name sneakpeek-webpage

      #Config script to update ./static directory before
      #files get copied to the S3 bucket
      - python builds/py/prod_stack_output.py

      - cat logs/stack_output
      - cd ./logs/
      - ls -l
      - cd ..

      #copies static files to newly created S3 resources
      - aws s3 cp ./static s3://prod-sneakpeek --recursive


  post_build:
    commands:
      - echo Entered the post_build phase...
      - python tests/test_prod_aws_resources.py
      - echo Build completed on `date`

artifacts:
  files:
    - ./logs/*
