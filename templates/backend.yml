---
AWSTemplateFormatVersion: "2010-09-09"

#Transforms any serverless code to cloudformation
Transform: AWS::Serverless-2016-10-31

Description:
  Creates the serverless backend using lambda, dynamodb and API Gateway

Parameters:

  LambdaCode:
    Type: String
    Default: dev
    Description: String for where the lambda code is uploaded to

  NamePrefix:
    Type: String
    Default: lambda-code-sneakpeek
    Description: String for prefixing resources to differentiate prod/dev


Resources:

  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
    #######################
    #Attributes that will be a part of the dynamodb table
    #Note you only need to define primary key attributes
    #As all other attributes added to the table do
    #not need to be defined when the table is created
    ##########################
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "load_id"
          AttributeType: "N"

      #on demand billing option
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
        -
          AttributeName: "load_id"
          KeyType: "RANGE"

      #Name of the dynamodb table will be concatenated
      #with the NamePrefix paramter and string "sneakpeek-table"
      TableName:
          Fn::Join:
              - ""
              - - !Ref NamePrefix
                - "-sneakpeek-table"

#########################
#The role that lambda will assume when it
#calls DynamoDB
#
#
#########################
  LambdaRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      ################################
      #Gets the arn of the dynamodb table
      #that was created earlier in the cloudformation
      #Template
      ###############################
      Policies:
        - PolicyName: LambdaPutDynamoDb
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDbPut
                Effect: Allow
                #######################################
                #Allowing lambda to perform a PutItem on
                #DynamoDB
                #
                #######################################
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt DynamoDBTable.Arn

########################################
#Lambda function that will be called
#when the user gets to /ride.html
#
#
#
#######################################
  AuthenticationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "s3://cf-to-backend/ride.zip"

      # Event sources to attach to this function.
      #The function is
      # called when a HTTP request is made
      #to the API Gateway endpoint.
      Events:
        #api gateway event that triggers lambda
        ImageUploadApiGw:
            # Define an API Gateway endpoint that responds
            #to HTTP GET at /ride
            Type: Api
            Properties:
                # Auth:
                #     Authorizer: arn:aws:cognito-idp:us-east-1:350255258796:userpool/us-east-1_uWSFSS2Ph
                Path: /ride
                Method: GET
      FunctionName:
        Fn::Join:
          - ""
          - - !Ref NamePrefix
            - "lambda-ride-sneakpeek"
      MemorySize: 128
      #filename.function_name for python script
      Handler: ride.lambda_handler
      Runtime: python3.7
      Role:
        #Gets the role created above
        Fn::GetAtt:
          - LambdaRuntimeRole
          - Arn



      Timeout: 60
  # AuthenticationLambda:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:
  #       S3Bucket: "cf-to-backend"
  #       #Name of the deployment package
  #       S3Key: "ride.zip"
  #     Environment:
  #       Variables:
  #         test_table_arn: !Ref DynamoDBTable
  #
  #
  #






Outputs:
##################################
#Provides the arn for the dynamodb table, IAM role,
#etc.
##################################
  RideEndpoint:
    #gets the Arn associated with the API GW
    #used as an event source for the lambda function
    Value: !Ref ServerlessRestApi
  LambdaFunctionName:
    Value: !Ref AuthenticationLambda
  LambdaRoleArn:
    Value: !GetAtt LambdaRuntimeRole.Arn
  TableArn:
    Value: !GetAtt DynamoDBTable.Arn
