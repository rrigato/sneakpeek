---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Creates the serverless backend using lambda, dynamodb and API Gateway

Parameters:
  NamePrefix:
    Type: String
    Default: dev
    Description: String for prefixing resources to differentiate prod/dev

Resources:

  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
    #######################
    #Attributes that will be a part of the dynamodb table
    #Note you only need to define primary key attributes
    #As all other attributes added to the table do
    #not need to be defined when the table is created
    ##########################
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "load_id"
          AttributeType: "N"

      #on demand billing option
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
        -
          AttributeName: "load_id"
          KeyType: "RANGE"

      #Name of the dynamodb table will be concatenated
      #with the NamePrefix paramter and string "sneakpeek-table"
      TableName:
          Fn::Join:
              - ""
              - - !Ref NamePrefix
                - "-sneakpeek-table"

#########################
#The role that lambda will assume when it
#calls DynamoDB
#
#
#########################
  LambdaRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      ################################
      #Gets the arn of the dynamodb table
      #that was created earlier in the cloudformation
      #Template
      ###############################
      Policies:
        - PolicyName: LambdaPutDynamoDb
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDbPut
                Effect: "Allow"
                #######################################
                #Allowing lambda to perform a PutItem on
                #DynamoDB
                #
                #######################################
                Action:
                  - "dynamodb:PutItem"
                Resource:
                  - - !GetAtt DynamoDBTable.Arn

  # rLambdaFunction:
  #   Type: AWS::Lambda::Function
  #   DependsOn: rLambdaRole
  #   Properties:
  #     Role: !GetAtt 'rLambdaRole.Arn'
  #     FunctionName: !Sub '${AWS::StackName}-LambdaFunction'
  #     Runtime: python3.6
  #     Timeout: 60
  #     Environment:
  #       Variables:
  #         outbound_topic_arn: !Ref 'rNotifyTopicSNS'
  #         required_keys: !Ref 'pGlacierTaggingKeyNames'
  #         logging_level: !Ref 'pLoggingLevel'
  #     Handler: index.lambda_handler
  #     Code:
  #       S3Bucket: !Ref pLambdaZipBucket
  #       S3Key: !Ref pLambdaZipKey
  #



Outputs:
##################################
#Provides the arn for the dynamodb table, IAM role,
#etc.
##################################
  LambdaRoleArn:
    Value: !GetAtt LambdaRuntimeRole.Arn
  TableArn:
    Value: !GetAtt DynamoDBTable.Arn
