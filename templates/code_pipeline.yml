AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a CodePipeline that uses CodeBuild and CodeDeploy for a CI/CD pipeline
Parameters:
  RepositoryBranch:
    Type: String
    Default: dev
  #Default git repository used
  GitRepo:
    Type: String
    Default: https://git-codecommit.us-east-1.amazonaws.com/v1/repos/sneakpeek
  GitRepoName:
    Type: String
    Default: sneakpeek
  # TagKey:
  #   Type: String
  #   Default: Name
  # TagValue:
  #   Type: String
  #   Default: CodeDeployEC2Tag

  DevBuildName:
    Type: String
    Default: dev-sneakpeek-tests

  ProdBuildName:
    Type: String
    Default: prod-sneakpeek-deploy
  ProdStackName:
    Type: String
    Default: prod-sneakpeek

Resources:
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl
      Tags:
        -
          Key: stage
          Value: dev
        -
          Key: retain
          Value: "false"

  DevArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: codebuild-dev-sneakpeek
      Tags:
        -
          Key: stage
          Value: dev
        -
          Key: retain
          Value: "false"
  ProdArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: codebuild-prod-sneakpeek
      Tags:
        -
          Key: stage
          Value: dev
        -
          Key: retain
          Value: "false"
  #################################
  #Code Build Project that runs python
  #unit/integration tests
  #
  ###################################
  SneakPeekPythonTests:
    #Need the DevArtifactsBucket Created first before This
    #CodeBuild Project can start
    DependsOn: DevArtifactsBucket
    Type: AWS::CodeBuild::Project
    Properties:
      #Output location for the CodeBuild Project
      Artifacts:
        Type: S3
        Location: codebuild-dev-sneakpeek
        Packaging: NONE
      #Allows for git badge at top of git repo
      BadgeEnabled: true

      #Where logs are written to from code build
      LogsConfig:
          CloudWatchLogs:
              Status: ENABLED
              GroupName: codebuild-dev-sneakpeek
          S3Logs:
              Status: ENABLED
              Location: codebuild-dev-sneakpeek/buildlogs
      #Standard Linux Image environment
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:2.0
      Name: !Ref DevBuildName
      ServiceRole: arn:aws:iam::350255258796:role/DevSneakPeekCodeBuild
      #CodeCommit Git repo used for CodeBuild
      Source:
        #Buildspec file to use for the dev build
        BuildSpec: builds/buildspec_dev.yml
        Location: !Ref GitRepo
        Type: CODECOMMIT
      TimeoutInMinutes: 5

  #################################
  #Production Code Build that runs python
  #tests and deploys code to prod
  #
  ###################################
  ProdSneakPeekDeploy:
    #Need the ProdArtifactsBucket Created first before This
    #CodeBuild Project can start
    DependsOn: ProdArtifactsBucket
    Type: AWS::CodeBuild::Project
    Properties:
      #Output location for the CodeBuild Project
      Artifacts:
        Type: S3
        Location: codebuild-prod-sneakpeek
        Packaging: NONE
      #Allows for git badge at top of git repo
      BadgeEnabled: true
      #Where logs are written to from code build
      LogsConfig:
          CloudWatchLogs:
              Status: ENABLED
              GroupName: codebuild-prod-sneakpeek
          S3Logs:
              Status: ENABLED
              Location: codebuild-prod-sneakpeek/buildlogs
      #Standard Linux Image environment
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:2.0
      Name: !Ref ProdBuildName
      ServiceRole: arn:aws:iam::350255258796:role/DevSneakPeekCodeBuild
      #CodeCommit Git repo used for CodeBuild
      Source:
        #Buildspec file to use for the prod build
        BuildSpec: builds/buildspec_prod.yml
        Location: !Ref GitRepo
        Type: CODECOMMIT
      TimeoutInMinutes: 5


  ##########################################
  #Code Pipeline Is broken down into stages
  #that occur sequentially These can be
  #the following ci/cd actions
  # Source
  # Build
  # Test
  # Deploy
  # Approval
  # Invoke
  #
  #Actions for this environment:
  #Stage 1) Source = Get source code repository
  #Stage 2) Deploy = Cognito user pool used across dev/prod
  #Stage 3) Build = Build and test a dev environment
  #Stage 4) Deploy = Creates/Updates cloudformation template
  #stage 5) Build = runs any configuration necessary for the
  #Deploy stage using a CodeBuild Project
  ###########################################
  CodePipelineStack:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt [CodePipelineRole, Arn]
      ArtifactStore:
        Location:
          Ref:
            ArtifactStoreBucket
        Type: S3
      Stages:
        ###############################
        #Stage 1, gets the source control git repo
        #
        #
        ###############################
        - Name: SourceCodeRepo
          Actions:
            #The input artifact of an action must exactly
            # match the output artifact declared
            #in a preceding action
            - InputArtifacts: []
              Name: Source
              ######################################
              #List of valid action type providers
              #by action can be found here:
              #https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers
              ######################################
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeCommit
              OutputArtifacts:
                - Name: !Ref GitRepoName
            #Git repo for first stage
            #########################################
            #Configuration Details by provider can be found here:
            #https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#structure-configuration-examples
            #
            #########################################
              Configuration:
                BranchName: !Ref RepositoryBranch
                RepositoryName: !Ref GitRepoName
              #Run order within stage not between stages
              RunOrder: 1

        ############################
        #Second stage of this pipeline
        #Creates/updates the templates/cognito.yml
        #cloudformation template to create a cognito authentication
        #identity store for the backend
        ############################
          - Name: DeployCognito
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            InputArtifacts:
              - Name: sneakpeek
            OutputArtifacts:
              - Name: CognitoProdCf
            Configuration:
              #If the cloudformation stack does not exist
              #it will be created, otherwise the stack will be updated
              #with the template provided in TemplatePath
              ActionMode: CREATE_UPDATE
              RoleArn: !GetAtt [CFNRole, Arn]
              ################################
              #Appends cognito- to the prod stack
              #name. The fn::join returns a string
              #
              ################################
              StackName: !Join
                          - '-'
                          #The second argument is a list
                          - - 'cognito'
                            - !Ref ProdStackName

              #TemplatePath: !Ref GitRepoName !Sub "TemplateSource::${ProdStackConfig}"
              #Artifact::template_file_name
              #is what the deploy stage is expecting as input for the
              #cloudformation template location
              TemplatePath: sneakpeek::templates/cognito.yml
            RunOrder: 1

        ###############################
        #Stage 2 Builds the code in the
        #Dev environment
        #
        ###############################
        - Name: BuildDevEnvironment
          Actions:
          - Name: Build
              ######################################
              #List of valid action type providers
              #by action can be found here:
              #https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers
              ######################################
            ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
            OutputArtifacts:
              - Name: BuildDev
            InputArtifacts:
              - Name: !Ref GitRepoName
            #########################################
            #Configuration Details by provider can be found here:
            #https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#structure-configuration-examples
            #
            #########################################
            Configuration:
                ProjectName: !Ref DevBuildName
            RunOrder: 1

          ###################################
          #Stage 3) Deploys to production
          #by updating or creating a stack as
          #necessary
          ###################################
        - Name: DeployProd
          Actions:
        ############################
        #First action of this deploy prod stage
        #Creates/updates the templates/static_webpage.yml
        #cloudformation template to create a static
        #S3 webpage for hosting
        ############################
          - Name: DeployBucket
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            InputArtifacts:
              - Name: BuildDev
              - Name: sneakpeek
            OutputArtifacts:
              - Name: WebProdCf
            Configuration:
              #If the cloudformation stack does not exist
              #it will be created, otherwise the stack will be updated
              #with the template provided in TemplatePath
              ActionMode: CREATE_UPDATE
              #Used to pass parameters to Cloudformation template
              #referenced in TemplatePath
              #Fn:GetParam pass it the Artifact name,
              #json file name and the parameter in that file
              #And it will retrieve it for parameter overrides
              ParameterOverrides: |
                {
                   "BucketName" : { "Fn::GetParam" : [ "sneakpeek", "util/prod_config.json", "ParameterValue" ] }
                }
                  #'{"BucketName": "prod-sneakpeek"}'
              RoleArn: !GetAtt [CFNRole, Arn]
              StackName: !Ref ProdStackName
              #TemplatePath: !Ref GitRepoName !Sub "TemplateSource::${ProdStackConfig}"
              #Artifact::template_file_name
              #is what the deploy stage is expecting as input for the
              #cloudformation template location
              TemplatePath: sneakpeek::templates/static_webpage.yml
            RunOrder: 1


        ############################
        #Third action of this deploy prod stage
        #Creates/updates the templates/env_config.yml
        #cloudformation template to create an Systems Manager
        #(SSM) Parameter Store
        ############################
          - Name: DeploySsmParameters
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            InputArtifacts:
              - Name: BuildDev
              - Name: sneakpeek
              - Name: CognitoProdCf
            OutputArtifacts:
              - Name: ProdCf
            Configuration:
              #If the cloudformation stack does not exist
              #it will be created, otherwise the stack will be updated
              #with the template provided in TemplatePath
              ActionMode: CREATE_UPDATE
              RoleArn: !GetAtt [CFNRole, Arn]
              ################################
              #Appends env-config- to the prod stack
              #name. The fn::join returns a string
              #
              ################################
              StackName: !Join
                          - '-'
                          #The second argument is a list
                          - - 'env-config'
                            - !Ref ProdStackName

              #TemplatePath: !Ref GitRepoName !Sub "TemplateSource::${ProdStackConfig}"
              #Artifact::template_file_name
              #is what the deploy stage is expecting as input for the
              #cloudformation template location
              TemplatePath: sneakpeek::templates/env_config.yml
            RunOrder: 3

        ###############################
        #Stage 4 Builds the prod
        # environment by populating resources created
        # in stage 3
        ###############################
        - Name: BuildProdEnvironment
          Actions:
          - Name: Test
              ######################################
              #List of valid action type providers
              #by action can be found here:
              #https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers
              ######################################
            ActionTypeId:
                Category: Test
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
            InputArtifacts:
              - Name: !Ref GitRepoName
            OutputArtifacts:
              - Name: BuildProd
            #########################################
            #Configuration Details by provider can be found here:
            #https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#structure-configuration-examples
            #
            #########################################
            Configuration:
                PrimarySource: !Ref GitRepoName
                ProjectName: !Ref ProdBuildName

            RunOrder: 1

  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess



Outputs:
  CodeCommitURL:
    Description: CodeCommit URL
    Value:
      Fn::Join:
        - ""
        - - "https://console.aws.amazon.com/codepipeline/home?region="
          - Ref: AWS::Region
          - "#/repository/"
          - Ref: AWS::StackName
          - "/browse/HEAD/--/"
  CloneUrlSsh:
    Description: SSH command for connecting to the CodeCommit repo
    Value: !Ref GitRepo
